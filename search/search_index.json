{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agentic-AI-PostgreSQL \u2014 Project docs","text":"<p>Welcome to the documentation for Agentic-AI-PostgreSQL. This site is powered by MkDocs and stored in the <code>docs/</code> directory. Use this location for project-level documentation, how-tos, and safe reference material (do not commit secrets).</p> <p>Quick links</p> <ul> <li>Repository: https://github.com/AgnosticDBA/Agentic-AI-PostgreSQL</li> <li>Local preview instructions: see the Getting Started page.</li> </ul> <p>--</p> <p>If you'd like me to add additional pages (architecture, runbook, examples), tell me which pages to create and I'll scaffold them.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>This page summarizes the high-level architecture and key components used by the project.</p> <p>Components</p> <ul> <li>Postgres (local dev): run via Docker Compose using <code>postgres:16-alpine</code>. Data is stored in a named Docker volume and initial SQL can be provided via <code>./initdb/</code>.</li> <li>Docker Compose: orchestrates the local Postgres service and mounts the <code>initdb/</code> directory for boot-time scripts.</li> <li>Notebooks: Jupyter notebooks live in <code>notebooks/</code>. Large, outputful notebooks are intentionally not tracked; templates are in <code>notebooks/templates/</code>.</li> <li>MkDocs: docs served from <code>docs/</code> and deployed to GitHub Pages via GitHub Actions.</li> <li>Pre-commit &amp; nbstripout: repository is configured to strip notebook outputs and run common checks before commit.</li> </ul> <p>Data &amp; volumes</p> <ul> <li>The Postgres data volume is named using the compose project name (example: <code>agentic_pgdata</code>). Back up regularly if needed using <code>docker run --rm -v agentic_pgdata:/data -v $(pwd):/backup alpine sh -c \"cd /data &amp;&amp; tar czf /backup/pgdata-backup.tar.gz .\"</code> (example approach).</li> </ul> <p>Secrets &amp; credentials</p> <ul> <li>Do not store secrets in the repo. Use OS keychain, 1Password, or a secret manager. GitHub Actions can access <code>secrets.GITHUB_TOKEN</code> for deployments; add any additional secrets in the repo settings.</li> </ul> <p>Notes</p> <ul> <li>The project is intentionally lightweight for local development. If you later want to run Postgres in production, consider a managed provider or a secure VM with proper backups and monitoring.</li> </ul>"},{"location":"getting-started/","title":"Getting started \u2014 preview and deploy","text":"<p>Local preview</p> <p>Install MkDocs and the Material theme (recommended):</p> <pre><code>pip install --user mkdocs mkdocs-material\n# make sure $HOME/.local/bin is on your PATH or use the full path to the mkdocs executable\nmkdocs serve\n</code></pre> <p>Open the URL shown (usually http://127.0.0.1:8000) to preview the site locally.</p> <p>Deploy to GitHub Pages</p> <p>If you'd like to publish to GitHub Pages, you can use MkDocs' gh-deploy command (it will build and push to the gh-pages branch):</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>Alternatively, use a GitHub Actions workflow to build and publish automatically on push. Ask me and I can add a simple <code>mkdocs.yml</code> GitHub Action that runs <code>mkdocs gh-deploy</code> on <code>main</code>.</p> <p>Notes</p> <ul> <li>Keep the docs in <code>docs/</code> as plain Markdown so they are easy to edit and review.</li> <li>Do not place secrets in the docs; use the OS keychain or a secret manager for credentials.</li> </ul>"},{"location":"github-credentials/","title":"GitHub credential options (kept for reference)","text":"<p>This file summarizes three common ways to authenticate with GitHub so you can push from this repository. Keep this file for future reference.</p>"},{"location":"github-credentials/#a-ssh-keys-recommended-for-long-term-use","title":"A) SSH keys (recommended for long-term use)","text":"<p>When to use: you prefer SSH keys, want passwordless auth, or have multiple machines.</p> <p>Steps (macOS / fish):</p> <pre><code># generate a new ED25519 key (replace the email)\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n# start the agent (macOS comes with ssh-agent)\neval (ssh-agent -s)\n\n# add the private key to the agent\nssh-add ~/.ssh/id_ed25519\n\n# print the public key and copy it into GitHub &gt; Settings &gt; SSH and GPG keys\ncat ~/.ssh/id_ed25519.pub\n</code></pre> <p>After adding the key to GitHub, add or update your remote to use the SSH URL:</p> <pre><code>git remote add origin git@github.com:YOUR_USERNAME/YOUR_REPO.git\ngit push -u origin HEAD\n</code></pre> <p>Notes: - Use <code>ssh-agent</code> or macOS Keychain to avoid entering passphrases repeatedly. - This is secure and widely recommended for developer machines.</p>"},{"location":"github-credentials/#b-https-with-a-personal-access-token-pat","title":"B) HTTPS with a Personal Access Token (PAT)","text":"<p>When to use: you can't/don't want to set up SSH keys, or you need fine-grained token scopes.</p> <p>Steps:</p> <ol> <li>Create a PAT at https://github.com/settings/tokens \u2014 choose scopes like <code>repo</code> (and <code>workflow</code> if needed).</li> <li>Configure Git credential helper so macOS stores the token in Keychain:</li> </ol> <pre><code>git config --global credential.helper osxkeychain\n</code></pre> <ol> <li>Use the HTTPS remote URL. The first <code>git push</code> will prompt for credentials; use your username and the PAT as the password.</li> </ol> <pre><code>git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO.git\ngit push -u origin HEAD\n</code></pre> <p>Notes: - PATs are easier if you need short-lived tokens or automation. - Do NOT commit PATs or secrets to the repo. Use a secret manager (1Password, macOS Keychain, pass, etc.).</p>"},{"location":"github-credentials/#c-github-cli-gh-interactive-and-convenient-you-selected-this","title":"C) GitHub CLI (<code>gh</code>) \u2014 interactive and convenient (you selected this)","text":"<p>When to use: you want a guided login flow, easy repo creation, and tight GitHub integration from the terminal. <code>gh</code> can create remotes, open PRs, and manage authentication.</p> <p>Install (Homebrew):</p> <pre><code>brew install gh\n</code></pre> <p>Authenticate (interactive):</p> <pre><code># web-based login (recommended interactive flow)\ngh auth login --web\n\n# or to force SSH protocol for git operations\ngh auth login --web --git-protocol ssh\n\n# check status\ngh auth status\n</code></pre> <p>Create a GitHub repo (if you don't have one yet) and push the current directory:</p> <pre><code># create a new repo under your user/org, add remote, and push\ngh repo create YOUR_USERNAME/YOUR_REPO --public --source=. --remote=origin --push\n\n# OR, if the repo already exists on GitHub, set remote and push\ngit remote add origin git@github.com:YOUR_USERNAME/YOUR_REPO.git\ngit push -u origin HEAD\n</code></pre> <p>Notes: - <code>gh</code> will handle authentication (browser or device code) and can be used non-interactively with a token. - Great for discoverability and automating repo tasks.</p>"},{"location":"github-credentials/#quick-security-reminders","title":"Quick security reminders","text":"<ul> <li>Never store PATs, private keys, or secrets in plain files in the repo.</li> <li>Use the OS keychain or a password manager for tokens.</li> <li>Limit token scopes to the minimum required.</li> </ul> <p>If you'd like, I can now run the <code>gh</code> login flow interactively (it will open a browser) or provide exact commands to create the remote and push \u2014 tell me which account/repo name you want to use and whether you prefer SSH or HTTPS for the remote.</p>"},{"location":"runbook/","title":"Runbook: common tasks and troubleshooting","text":"<p>This runbook collects common commands and checks for local development with Docker Compose and the Postgres service.</p> <p>Start / stop / status</p> <pre><code># start in detached mode\ndocker compose up -d\n\n# stop\ndocker compose down\n\n# see container status\ndocker ps -a --filter name=agentic_pg16\n\n# view logs\ndocker compose logs -f postgres\n</code></pre> <p>Database access</p> <pre><code># connect from host using psql (example assumes pgcli/psql installed)\npsql \"host=127.0.0.1 port=5432 user=postgres dbname=postgres\"\n</code></pre> <p>Backups</p> <pre><code># export a SQL dump from the running container\ndocker exec -t $(docker compose ps -q postgres) pg_dumpall -U postgres &gt; all.sql\n\n# example restore\ncat all.sql | docker exec -i $(docker compose ps -q postgres) psql -U postgres\n</code></pre> <p>Health checks &amp; troubleshooting</p> <ul> <li>If <code>docker compose up</code> fails due to a container name conflict, inspect existing containers with <code>docker ps -a</code> and remove the conflicting container (if safe) with <code>docker rm -f &lt;id&gt;</code>.</li> <li>If volumes need cleaning, inspect <code>docker volume ls</code> and remove unused volumes carefully. Backup data before removing volumes.</li> <li>For fish startup issues (missing <code>pyenv</code> or <code>zoxide</code>), guard the configuration lines in <code>~/.config/fish/config.fish</code> with checks such as <code>if type -q pyenv;</code> or <code>if test -f ~/.secrets.fish; source ~/.secrets.fish; end</code>.</li> </ul> <p>When to escalate</p> <ul> <li>If the DB data is corrupted or lost, restore from the most recent backup. Consider rotating backups and automated scheduled backups.</li> <li>For repeated container conflicts or orphaned networks, restart the Docker service or prune unused networks/volumes with care.</li> </ul>"},{"location":"wiki-setup/","title":"Personal wiki and note-taking options (recommended approaches)","text":"<p>Short summary: choose between a private local-first vault (Obsidian / plain Markdown + git) or a web-hosted docs site (MkDocs / GitHub Pages / Docusaurus) depending on whether your notes are personal/private or meant to be shared.</p> <p>Options and recommendations</p> <ol> <li>Obsidian (local-first, powerful)</li> <li>Pros: great editor, plugins, local-only, fast. Works offline. Can sync via git or Obsidian Sync.</li> <li>Cons: desktop-first, some features are paid.</li> <li> <p>Workflow: keep a git repo for your vault (private), push to a private GitHub repo for backup.</p> </li> <li> <p>MkDocs (static site, Git-backed, great for docs)</p> </li> <li>Pros: Markdown -&gt; static site, easy GitHub Pages deployment, search and navigation.</li> <li>Cons: slightly more setup, more formal structure.</li> <li>Quick start:</li> </ol> <pre><code>pip install mkdocs mkdocs-material\nmkdocs new my-docs\n# edit docs/, mkdocs.yml, then\nmkdocs serve    # local preview\nmkdocs gh-deploy  # deploy to GitHub Pages\n</code></pre> <ol> <li>GitHub Wiki (repo-integrated)</li> <li>Pros: built into GitHub, git-backed, quick for project docs.</li> <li> <p>Cons: less flexible than a docs site, lives in a separate git repo per project.</p> </li> <li> <p>Notion / OneNote (cloud-hosted)</p> </li> <li>Pros: excellent search, collaboration, structured pages, sharing.</li> <li> <p>Cons: vendor lock-in, not Git-friendly, not plaintext-first.</p> </li> <li> <p>TiddlyWiki (single-file wiki)</p> </li> <li>Pros: portable single-file wiki.</li> <li>Cons: quirky editing workflow, less standard for developer docs.</li> </ol> <p>Suggested minimal on-disk structure (git repo) for notes you want to keep with the project:</p> <pre><code>docs/                      # markdown docs that can be served by MkDocs or GH Pages\n  01-projects/\n  02-infra/\n  03-credentials.md        # short summaries (no secrets)\ntemplates/\nnotes/                     # personal notes (if public, avoid secrets)\n</code></pre> <p>Example page template (credentials / how-tos)</p> <p>title: GitHub credentials tags: [credentials, git]</p>"},{"location":"wiki-setup/#summary","title":"Summary","text":"<ul> <li>Short summary of the method used (SSH, PAT, or gh)</li> </ul>"},{"location":"wiki-setup/#commands","title":"Commands","text":"<pre><code># example commands go here\n</code></pre>"},{"location":"wiki-setup/#security","title":"Security","text":"<ul> <li>Where secrets are stored (password manager, Keychain, etc.)</li> </ul> <p>Security &amp; hygiene - Never commit secrets. If you need to keep an encrypted secret in the repo, use a tool such as git-crypt or SOPS (GPG-based) and store keys outside the repo. - Prefer OS keychain, 1Password, or pass for secrets.</p> <p>Backup and sync guidance - For personal vaults, use a private GitHub repo (or private cloud sync) as a backup; avoid exposing secrets. - For team docs/public docs, prefer MkDocs/Docusaurus + GitHub Pages for a stable website.</p> <p>Recommendation (short): - For private personal notes: Obsidian + git sync to a private repo (or Obsidian Sync). - For sharable project docs: <code>docs/</code> + MkDocs (material) and GitHub Pages.</p> <p>Next steps I can help with - Create a <code>docs/</code> skeleton (MkDocs) in this repo and add a sample page. - Initialize an Obsidian-friendly repo layout and <code>.gitignore</code> entries. - Help run <code>gh auth login</code> and create the GitHub remote and push.</p>"}]}